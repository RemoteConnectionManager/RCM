logging_configs:
  version: 1
  disable_existing_loggers: False

  formatters:
  # colors strings
  # from https://stackoverflow.com/questions/39473297/how-do-i-print-colored-output-with-python-3
    colored_in:
      format: "\x1b[33m%(message)s \x1b[0m"
    colored_out:
      format: "\x1b[90m%(message)s \x1b[0m"
    colored_out_base:
      format: "\x1b[90m%(levelname)-5s %(name)s # %(filename)s:%(lineno)s] %(message)s \x1b[0m"
    colored_err:
      format: "\x1b[91m%(message)s \x1b[0m"
    colored_err_base:
      format: "\x1b[91m%(levelname)-5s %(name)s # %(filename)s:%(lineno)s] %(message)s \x1b[0m"
    empty:
      format: "%(message)s"
    bare:
      format: "%(levelname)-5s %(lineno)s:%(message)s"
    short:
      format: "#%(levelname)-5s %(name)s[#%(message)s"
    base:
      format: "[%(levelname)-5s %(name)s # %(filename)s:%(lineno)s] %(message)s"
    long:
      format: "[%(filename)s:%(lineno)s - %(funcName)20s() %(asctime)s] %(message)s"
  handlers:
    console_colored_in:
      class: logging.StreamHandler
      level: DEBUG
      formatter: colored_in
      stream: ext://sys.stdout
    console_colored_out:
      class: logging.StreamHandler
      level: DEBUG
      formatter: colored_out
      stream: ext://sys.stdout
    console_colored_out_base:
      class: logging.StreamHandler
      level: DEBUG
      formatter: colored_out_base
      stream: ext://sys.stdout
    console_colored_err:
      class: logging.StreamHandler
      level: DEBUG
      formatter: colored_err
      stream: ext://sys.stdout
    console_colored_err_base:
      class: logging.StreamHandler
      level: DEBUG
      formatter: colored_err_base
      stream: ext://sys.stdout
    console:
      class: logging.StreamHandler
      level: DEBUG
      formatter: base
      stream: ext://sys.stdout
    console_short:
      class: logging.StreamHandler
      level: DEBUG
      formatter: short
      stream: ext://sys.stdout
    console_bare:
      class: logging.StreamHandler
      level: INFO
      formatter: bare
      stream: ext://sys.stdout
    console_empty:
      class: logging.StreamHandler
      level: INFO
      formatter: empty
      stream: ext://sys.stdout
  loggers:
#    '':
      # other configuration for logger 'foo.bar.baz'
#      handlers: [console_colored_err_base]
#      level: INFO
    root:
      level: INFO
      handlers: [console_colored_err_base]
      propagate: False
    RCM:
      level: WARNING
      handlers: [console_colored_err_base]
      propagate: False
    rcmServer:
      level: WARNING
      handlers: [console_colored_err_base]
      propagate: False
    rcmServer.jobscript_builder:
      level: INFO
      handlers: [console]
#      handlers: [console]
# handlers are list, so hyapico do not override but merge, so can result into the same log handled multiple times
    rcmServer.jobscript_builder.constructor:
      level: INFO
      handlers: [console_colored_out_base]
      propagate: False
    utils.external.hiyapyco:
      handlers: [console]
      level: INFO
      propagate: False
    external.hiyapyco:
#      handlers: [console]
      level: INFO
      propagate: False
    __main__:
      handlers: [console_empty]
      level: WARNING
      propagate: False
    utils:
      handlers: [console]
      propagate: False
      level: INFO
    plugin:
      handlers: [console]
      level: INFO
      propagate: False
    utils.run:
      level: WARNING
      handlers: [console]
      propagate: False
    utils.run.input:
      level: INFO
      handlers: [console]
      propagate: False
