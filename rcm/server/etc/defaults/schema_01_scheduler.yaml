schema:
  TOP:
    children:
      SCHEDULER:
        label : 'Scheduler'
        type : 'combobox'

        substitutions :
          HEADER : ""
          ACCOUNT.QUEUE.QOS.GRES.VGLRUN_SLURM_DISPLAY : |
            XDPYINFO_OUT=$(xdpyinfo -display :0)
            if [ 0 == $? ]
            then
              declare -a screens
              screen_count=0
              for screen in $(echo "$XDPYINFO_OUT" | grep 'screen #' | cut -d'#' -f 2 | cut -d':' -f 1)
              do
                screens[$screen_count]=$screen
                screen_count=$(($screen_count +1))
              done
              #echo "FOUND $screen_count  NUMBER OF SCREENS on DISPLAY :0"
              export VGLRUN_DISPLAY_FLAG="-d :0.$(shuf -i 0-$(($screen_count -1)) -n 1)"
              #echo "vglrun $VGLRUN_DISPLAY_FLAG"
              vglrun() { $(/usr/bin/which vglrun) $VGLRUN_DISPLAY_FLAG $@; }
              export -f  vglrun
            else
              vglrun() { echo 'vglrun can not be used without gpu'; }
              export -f  vglrun
            fi

          SERVICE_SETUP: |
            if [[ "$RCM_SERVICES_SETUP" == *VGLRUN* ]]
            then
            # Here is the VGLRUN setup from different scheduler and queues
            # is activate just when the selected service requires it
            #echo "Redefining vglrun" >&2
            @{ACCOUNT.QUEUE.QOS.GRES.VGLRUN_SLURM_DISPLAY}
            fi

          ACCOUNT.QUEUE.TIMELIMIT : "~"
          ACCOUNT.QUEUE.QUEUE_NAME: "@{QUEUE}"

        children :
          ACCOUNT :
            label : 'Account'
            type : 'combobox'
            description : "Select the account for submitting the job service"
            children :
      #composites
              QUEUE :
                label : 'Queue'
                type : 'combobox'
                description : "Select the slurm partition to run the job service"
                substitutions:
                  QUEUE_PAR: "-N 1 -n @{CPU} --mem=@{MEMORY}GB @{GRES.GRES_STRING} #from schema"
                  QOS.GRES.GRES_STRING: ""
                  TIMELIMIT: "@{QOS.TIME}"

                children :
                  QOS :
                    label : 'QoS'
                    type : 'combobox'
                    description : "Select the Quality of Service for job submission"
                    children:

                      MEMORY :
                        label : 'Memory'
                        type : 'slider'
                        description : "Select the required memory (GigaBytes) for job service"
                        values :
                          min : 1
                          max : 120
                          default: 0.25
                      CPU :
                        label : 'CPU'
                        type : 'slider'
                        description : "Select the required number of cores for job service"
                        values :
                          min : 1
                          max : 56
                          default: 0.25
                      TIME :
                        label : 'Time (hour:min:sec)'
                        type : 'timeslider'
                        description : "Select the wall clock time limit for job service to run"
                        values :
                          min : '00:00:01'
                          max : '23:58:00'
                          default: 0.1
                      TIMEOUT :
                        label : 'Timeout (sec)'
                        type : 'slider'
                        description : "Waiting timeout for job submission (after job is cancelled)"
                        values :
                          min : 10
                          max : 120
                          default: 0.1
                      GRES :
                        label : 'GPU'
                        type : 'combobox'
                        description : "Select the number of GPU required"
                        children :



