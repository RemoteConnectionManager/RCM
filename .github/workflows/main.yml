# This is a basic workflow to help you get started with Actions

name: RCM_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev", "feature/ci-split-artifact" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10.11"
  TURBOVNC_DOWNLOAD: https://github.com/TurboVNC/turbovnc/releases/download
  TURBOVNC_EXTERNAL: "RCM/rcm/client/external/turbovnc"
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os:
        - ubuntu-latest	
        # - ubuntu-20.04
        turbovnc-version:
        - '3.1'
        # - '2.2.7'
        # include:
          # - os: macos-latest
            # turbovnc-version: 'none'

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:   
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout RCM in RCM folder
        uses: actions/checkout@v4.1.1
        with:
          path: RCM

      # CACHE
      - name: (GHO) Cache python
        uses: actions/cache@v4.0.0
        id: cache-python
        with:
          path: python
          key: python-${{ env.PYTHON_VERSION }}-${{ runner.os }}

      - name: (GHO) Cache venv
        uses: actions/cache@v4.0.0
        id: cache-venv
        with:
          path: venv
          key: venv-${{ hashFiles('RCM/rcm/client/requirements.txt') }}-${{ runner.os }}

      - name: (GHO) Cache turbovnc
        uses: actions/cache@v4.0.0
        id: cache-turbovnc
        with:
          path: turbovnc
          key: turbovnc-${{ matrix.turbovnc-version }}-${{ runner.os }}
  
      # PYTHON
      - name: Setup pyenv
        run: |
          export PYENV_ROOT=~/.pyenv
          echo "PYENV_ROOT=${PYENV_ROOT}" >> "${GITHUB_ENV}"
          echo "${PYENV_ROOT}/bin" >> "${GITHUB_PATH}"
          echo "${PYENV_ROOT}/versions/${PYTHON_VERSION}/bin" >> "${GITHUB_PATH}"
          
      - name: Install pyenv locally
        if: ${{ steps.cache-python.outputs.cache-hit != 'true' }}
        run: |
          git clone https://github.com/pyenv/pyenv.git "${PYENV_ROOT:?}"
          pyenv install "${PYTHON_VERSION}"

      # VENV
      - name: Install venv
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
        run: |
          which python
          python -m venv venv
          venv/bin/activate
          pip install -r RCM/rcm/client/requirements.txt

      # TURBOVNC
      - name: Extract turbovnc
        if: ${{ steps.cache-turbovnc.outputs.cache-hit != 'true' && runner.os != 'macos-latest' }}
        env:
          turbovnc-version: ${{ matrix.turbovnc-version }}
        run: |
          wget $TURBOVNC_DOWNLOAD/${{ matrix.turbovnc-version }}/turbovnc_${{ matrix.turbovnc-version }}_amd64.deb -O turbovnc.deb
         
          # Extract file from deb
          dpkg-deb -x turbovnc.deb turbovnc

          # Copy extracted file to `$TURBOVNC_EXTERNAL` 
          mv turbovnc/opt/TurboVNC $TURBOVNC_EXTERNAL
          mv turbovnc/usr/share $TURBOVNC_EXTERNAL
          mv turbovnc/etc $TURBOVNC_EXTERNAL

      # PYINSTALLER
      - name: Build pyinstaller
        run: |
          source venv/bin/activate
          pyinstaller RCM/rcm/client/rcm_client_qt.spec

      # ARTIFACT
      - name: (GHO) Move preartifacts
        run: |
          mv dist/*/*/RCM.exe .
          unzip dist/*/*/RCM.zip -d ./RCM-dir

      - name: (GHO) Upload exe
        uses: actions/upload-artifact@v4.3.1
        with:
          name: RCM-client-${{ runner.os }}-turbovnc-${{ matrix.turbovnc-version }}
          path: |
            RCM.exe

      - name: (GHO) Upload dir
        uses: actions/upload-artifact@v4.3.1
        with:
          name: RCM-client-${{ runner.os }}-turbovnc-${{ matrix.turbovnc-version }}-dir
          path: |
            RCM-dir
