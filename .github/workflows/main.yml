# This is a basic workflow to help you get started with Actions

name: RCM_CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  RCM_CHECKOUT: "RCM"
  PYTHON_VERSION: "3.10.11"
  PYENV_VERSION: "2.3.35"
  PARAMIKO_PULL: "2258"
  PARAMIKO_COMMIT: "1a45c7ec74cf8ee1d537e3ca032e7fef40fa62b3"
  TURBOVNC_DOWNLOAD: "https://github.com/TurboVNC/turbovnc/releases/download"
  TURBOVNC_EXTERNAL: "rcm/client/external/turbovnc"
  SMALLSTEP_DOWNLOAD: "https://github.com/smallstep/cli/releases/download"
  SMALLSTEP_VERSION: "0.25.2"
  SMALLSTEP_EXTERNAL: "rcm/client/external/step"
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    strategy:
      matrix:
        os:
        - windows-latest
        - ubuntu-latest	
        - ubuntu-20.04
        turbovnc-version:
        - '3.1'
        - '2.2.7'
        include:
          - os: macos-latest
            turbovnc-version: 'none'

    # The type of runner that the job will run on
    runs-on: ${{ matrix.os }}
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Install missing Qt libraries ubuntu
        if: ${{ contains(matrix.os, 'ubuntu')  }}
        run: |
          sudo apt update
          sudo apt install -y qtbase5-dev qt5-qmake
          # skipping cmake qtcreator qtwayland5

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout RCM
        uses: actions/checkout@v4.1.1
        with:
          path: "${{ env.RCM_CHECKOUT }}"

      # CACHE
      - name: (GHO) Cache pyenv
        uses: actions/cache@v4.0.0
        id: cache-pyenv
        with:
          path: ~/.pyenv
          key: pyenv-${{ env.PYENV_VERSION }}-python-${{ env.PYTHON_VERSION }}-${{ matrix.os }}

      - name: (GHO) Cache venv
        uses: actions/cache@v4.0.0
        id: cache-venv
        with:
          path: venv
          key: venv-${{ hashFiles( format('{0}/rcm/client/requirements.txt', env.RCM_CHECKOUT ) ) }}-paramiko-${{ env.PARAMIKO_PULL }}-${{env.PARAMIKO_COMMIT}}-${{ matrix.os }}

      - name: (GHO) Cache turbovnc
        uses: actions/cache@v4.0.0
        id: cache-turbovnc
        with:
          path: ${{ env.RCM_CHECKOUT }}/${{ env.TURBOVNC_EXTERNAL }}
          key: turbovnc-${{ matrix.turbovnc-version }}-${{ matrix.os }}

      - name: (GHO) Cache step
        uses: actions/cache@v4.0.0
        id: cache-step
        with:
          path: ${{ env.RCM_CHECKOUT }}/${{ env.SMALLSTEP_EXTERNAL }}
          key: step-${{ matrix.os }}

      # PYTHON
      - name: Setup pyenv environment
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        with:
          macos: |
            export PYENV_ROOT=~/.pyenv
            echo "PYENV_ROOT=${PYENV_ROOT}" >> "${GITHUB_ENV}"
            echo "${PYENV_ROOT}/bin" >> "${GITHUB_PATH}"
            echo "${PYENV_ROOT}/versions/${PYTHON_VERSION}/bin" >> "${GITHUB_PATH}"
          linux: |
            export PYENV_ROOT=~/.pyenv
            echo "PYENV_ROOT=${PYENV_ROOT}" >> "${GITHUB_ENV}"
            echo "${PYENV_ROOT}/bin" >> "${GITHUB_PATH}"
            echo "${PYENV_ROOT}/versions/${PYTHON_VERSION}/bin" >> "${GITHUB_PATH}"
          windows: |
            $env:PYENV_ROOT = "~/.pyenv/pyenv-win"
            echo "PYENV=${env:PYENV_ROOT}/" >> "${env:GITHUB_ENV}"
            echo "PYENV_ROOT=${env:PYENV_ROOT}/" >> "${env:GITHUB_ENV}"
            echo "PYENV_HOME=${env:PYENV_ROOT}/" >> "${env:GITHUB_ENV}"
            echo "${env:PYENV_ROOT}/bin" >> "${env:GITHUB_PATH}"
            echo "${env:PYENV_ROOT}/shims" >> "${env:GITHUB_PATH}"
            echo "${env:PYENV_ROOT}/versions/${env:PYTHON_VERSION}/bin" >> "${env:GITHUB_PATH}"
            echo "C:\Program Files\Git\usr\bin" >> "${env:GITHUB_PATH}"

      - name: Install pyenv locally
        if: ${{steps.cache-pyenv.outputs.cache-hit != 'true' }}
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        with:
          macos: |
            git clone -b "v${PYENV_VERSION}" "https://github.com/pyenv/pyenv.git" "${PYENV_ROOT:?}"
            pyenv install "${PYTHON_VERSION}"
          linux: |
            git clone -b "v${PYENV_VERSION}" "https://github.com/pyenv/pyenv.git" "${PYENV_ROOT:?}"
            pyenv install "${PYTHON_VERSION}"
          windows: |
            git clone "https://github.com/pyenv-win/pyenv-win.git" ~/.pyenv
            pyenv.bat install "${env:PYTHON_VERSION}"

      # VENV
      - name: Install venv
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
        with:
          macos: |
            python -m venv venv
            source venv/bin/activate
            pip install -r "${RCM_CHECKOUT}/rcm/client/requirements.txt"

            wget "https://github.com/paramiko/paramiko/pull/${PARAMIKO_PULL}/commits/${PARAMIKO_COMMIT}.patch" -O paramiko.patch
            PARAMIKO_FILE=$(python -c "import paramiko, os; print(os.path.join(os.path.dirname(paramiko.__file__), 'auth_handler.py'))")
            patch -N $PARAMIKO_FILE -i paramiko.patch
          linux: |
            python -m venv venv
            source venv/bin/activate
            pip install -r "${RCM_CHECKOUT}/rcm/client/requirements.txt"

            wget "https://github.com/paramiko/paramiko/pull/${PARAMIKO_PULL}/commits/${PARAMIKO_COMMIT}.patch" -O paramiko.patch
            PARAMIKO_FILE=$(python -c "import paramiko, os; print(os.path.join(os.path.dirname(paramiko.__file__), 'auth_handler.py'))")
            patch -N $PARAMIKO_FILE -i paramiko.patch
          windows: |
            python.exe -m venv venv
            venv\Scripts\Activate.ps1
            pip install -r "${env:RCM_CHECKOUT}\rcm\client\requirements.txt"

            Invoke-WebRequest -URI https://github.com/paramiko/paramiko/pull/2258/commits/1a45c7ec74cf8ee1d537e3ca032e7fef40fa62b3.patch -OutFile paramiko.patch
            $env:PARAMIKO_FILE = python -c "import paramiko, os; print(os.path.join(os.path.dirname(paramiko.__file__), 'auth_handler.py'))"
            patch -N $env:PARAMIKO_FILE -i paramiko.patch

      # TURBOVNC
      - name: Extract turbovnc
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        if: ${{ steps.cache-turbovnc.outputs.cache-hit != 'true'  }}
        env:
          TURBOVNC_VERSION: ${{ matrix.turbovnc-version }}
        with:
          macos: echo "Skip"
          linux: |
            # Download 
            wget $TURBOVNC_DOWNLOAD/${{ matrix.turbovnc-version }}/turbovnc_${{ matrix.turbovnc-version }}_amd64.deb -O turbovnc.deb

            # Extract
            dpkg-deb -x turbovnc.deb turbovnc

            # Copy extracted file to `"${RCM_CHECKOUT}/${TURBOVNC_EXTERNAL}"`
            cp -r turbovnc/opt/TurboVNC "${RCM_CHECKOUT}/${TURBOVNC_EXTERNAL}"
            cp -r turbovnc/usr/share "${RCM_CHECKOUT}/${TURBOVNC_EXTERNAL}"
            cp -r turbovnc/etc "${RCM_CHECKOUT}/${TURBOVNC_EXTERNAL}"
          windows: |
            # Install innoextract locally
            Invoke-WebRequest -URI "https://github.com/dscharrer/innoextract/releases/download/1.9/innoextract-1.9-windows.zip" -OutFile innoextract.zip 
            Expand-Archive -LiteralPath .\innoextract.zip -DestinationPath .\innoextract

            # Download 
            Invoke-WebRequest -URI "${{ env.TURBOVNC_DOWNLOAD }}/${{ env.TURBOVNC_VERSION }}/TurboVNC-${{ env.TURBOVNC_VERSION}}-x64.exe" -OutFile turbovnc.exe 
  
            # Extract
            .\innoextract\innoextract turbovnc.exe
          
            # Copy extracted file to `"${RCM_CHECKOUT}/${TURBOVNC_EXTERNAL}"`
            mkdir "${{ env.RCM_CHECKOUT }}\${{ env.TURBOVNC_EXTERNAL }}"
            mv app "${{ env.RCM_CHECKOUT }}/${{ env.TURBOVNC_EXTERNAL }}/bin"

      # EXTERNAL STEP
      - name: External step
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        if: ${{ steps.cache-step.outputs.cache-hit != 'true'  }}
        with:
          macos: echo "Skip"
          linux: |
            URL="${{ env.SMALLSTEP_DOWNLOAD }}/v${{ env.SMALLSTEP_VERSION }}/step_linux_${{ env.SMALLSTEP_VERSION }}_amd64.tar.gz"
            wget "$URL" -O step.tgz
            tar -xzvf step.tgz -C "${{ env.RCM_CHECKOUT }}/${{ env.SMALLSTEP_EXTERNAL }}"
          windows: |
            $URL = "${{ env.SMALLSTEP_DOWNLOAD }}/v${{ env.SMALLSTEP_VERSION }}/step_windows_${{ env.SMALLSTEP_VERSION }}_amd64.zip"
            Invoke-WebRequest -URI "$URL" -OutFile step.zip
            Expand-Archive -LiteralPath .\step.zip -DestinationPath "${{ env.RCM_CHECKOUT }}/${{ env.SMALLSTEP_EXTERNAL }}"

      # PYINSTALLER
      - name: Build pyinstaller
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        with:
          macos: |
            source venv/bin/activate
            pyinstaller "${RCM_CHECKOUT}/rcm/client/rcm_client_qt.spec"
          linux: |
            source venv/bin/activate
            pyinstaller "${RCM_CHECKOUT}/rcm/client/rcm_client_qt.spec"
          windows: |
            venv\Scripts\Activate.ps1
            pyinstaller "${{ env.RCM_CHECKOUT }}\rcm\client\rcm_client_qt.spec"
  
      # ARTIFACT
      - name: (GHO) Move preartifacts
        uses: carlkidcrypto/os-specific-runner@v2.0.0
        with:
          macos: |
            find dist -name "RCM" -type f -exec cp '{}' RCM.exe \;
            find dist -name "RCM.zip" -type f -exec unzip '{}' -d ./RCM-dir \;        
          linux: |
            find dist -name "RCM" -type f -exec cp '{}' RCM.exe \;
            find dist -name "RCM.zip" -type f -exec unzip '{}' -d ./RCM-dir \;
          windows: |
            cp dist/*/*/RCM.exe .
            Expand-Archive -Path dist/*/*/RCM.zip -DestinationPath ./RCM-dir

      - name: (GHO) Install cosign
        uses: sigstore/cosign-installer@v3.3.0

      - name: (GHO) Sign image with a key
        run: |
          cosign sign-blob --yes --key env://COSIGN_PRIVATE_KEY --output-signature "${{ env.FILE2SIGN }}.sig" "${{ env.FILE2SIGN }}.exe"
          cosign verify-blob --key env://COSIGN_PUBLIC_KEY --signature "${{ env.FILE2SIGN }}.sig" "${{ env.FILE2SIGN }}.exe"
          echo "${{ env.COSIGN_PUBLIC_KEY }}" > RCM.pub
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.COSIGN_PRIVATE_KEY }}
          COSIGN_PUBLIC_KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          COSIGN_PASSWORD: ${{ secrets.COSIGN_PASSWORD }}
          FILE2SIGN: "RCM"

      - name: (GHO) Upload exe
        uses: actions/upload-artifact@v4.3.1
        with:
          name: RCM-client-${{ matrix.os }}-turbovnc-${{ matrix.turbovnc-version }}
          path: |
            RCM.exe
            RCM.sig
            RCM.pub

      - name: (GHO) Upload dir
        uses: actions/upload-artifact@v4.3.1
        with:
          name: RCM-client-${{ matrix.os }}-turbovnc-${{ matrix.turbovnc-version }}-dir
          path: |
            RCM-dir
